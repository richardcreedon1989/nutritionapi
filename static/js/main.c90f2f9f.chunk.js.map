{"version":3,"sources":["images/selector-image.jpg","images/macro-image.jpg","components/Searcher.js","components/MacroSelectorInput.js","components/MacroSelector.js","components/FoodTable.js","components/Slider.js","components/Jumbotron.js","App.js","index.js"],"names":["module","exports","Searcher","props","useState","searchTerm","setSearchTerm","style","marginTop","className","margin","justifyContent","textAlign","Form","onSubmit","e","preventDefault","onSearchSubmit","Input","type","placeholder","value","onChange","target","MacroSelectorInput","nutritionHandler","id","styling","width","toast","configure","MacroSelector","macro","setMacro","dailyMacroGrams","setDailyMacroGrams","dailyCalories","setDailyCalories","useEffect","dailyCalorieSelector","macroGramsSetter","protein","fat","carbs","carbGrams","fatGrams","toFixed","paddingTop","htmlFor","Button","onClick","macrosHandler","parseInt","error","FoodTable","foodItemDetails","sumOfFoodItems","calories","Table","window","screen","striped","scope","length","map","foodItem","index","key","name","removeRow","backgroundColor","fontWeight","remainingMacros","Sliders","setCalorieHandler","marginLeft","marginRight","href","Label","for","min","max","step","display","alignContent","src","calorieSelectorImage","Jumbo","Jumbotron","marginBottom","icon","faHandPointer","faPercentage","faCalculator","paddingBottom","faAppleAlt","App","setDailyCalorieSelector","setFoodItemDetails","setSumOfFoodItems","setRemainingMacros","a","data","title","ingr","axios","post","then","response","uuidv4","totalNutrients","FAT","quantity","PROCNT","CHOCDF","console","log","catch","err","Container","Slider","alignItems","deletedRowNewArray","filter","row","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c90f2f9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/selector-image.da3ba8bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/macro-image.632e9765.jpg\";","import React, { useState } from \"react\";\nimport { Input, Form } from \"reactstrap\";\nimport \"./searcher.css\";\n\nconst Searcher = (props) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const onSearchSubmit = (e) => {\n    e.preventDefault();\n    props.onSearchSubmit(searchTerm);\n    setSearchTerm(\"\");\n  };\n\n  const searchChangeHandler = (e) => {\n    e.preventDefault();\n    setSearchTerm(e.target.value);\n  };\n\n  return (\n    <div style={{ marginTop: \"1em\" }}>\n      <h4 className=\"macro-selector-heading\"> Food Searcher </h4>\n      <hr className=\"macro-selector-hr\" />\n      <div\n        style={{\n          margin: \"0 1em\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <p>\n          To work out the amount of calories you consume per day, enter the\n          consumed food item and its weights in the search box below\n        </p>\n        <p>\n          Then we will query our nutritional database and find the calories for\n          the food item, as well as the carbs, protein, and fats\n        </p>\n        <p>\n          {\" \"}\n          Lastly, we will then remove the food item from the total calories and\n          macros you have set previously\n        </p>\n      </div>\n      <hr className=\"hr-inputs\" />\n      <p\n        style={{\n          margin: \"1 0 1em\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        Enter the food item and its weights below\n        <i> e.g. 100g chicken or 200ml milk </i>\n      </p>\n      <Form onSubmit={onSearchSubmit} className=\"padding-bottom\">\n        <Input\n          type=\"text\"\n          placeholder=\"Enter food and grams\"\n          value={searchTerm}\n          onChange={searchChangeHandler}\n        />\n      </Form>\n    </div>\n  );\n};\n\nexport default Searcher;\n","import React from \"react\";\nimport { Input } from \"reactstrap\";\n\nconst MacroSelectorInput = ({ nutritionHandler, styling, id }) => {\n  return (\n    <>\n      <Input\n        style={{ width: \"50%\" }}\n        type=\"number\"\n        id={id}\n        onChange={(e) => nutritionHandler(e.target.value, id)}\n      />\n    </>\n  );\n};\n\nexport default MacroSelectorInput;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport MacroSelectorInput from \"./MacroSelectorInput\";\nimport macroImage from \"../../src/images/macro-image.jpg\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDrumstickBite } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./macroSelector.css\";\ntoast.configure();\n\nconst MacroSelector = (props) => {\n  const [macro, setMacro] = useState(); //Holds % of each macronutient that user entered\n  const [dailyMacroGrams, setDailyMacroGrams] = useState();\n  const [dailyCalories, setDailyCalories] = useState();\n\n  const nutritionHandler = (e, id) => {\n    setMacro({ ...macro, [id]: [e] });\n  }; //sets % user wants for each of the macros\n\n  const macrosHandler = (e) => {\n    e.preventDefault();\n    const { protein, fat, carbs } = macro;\n    fat && protein && carbs && props.macrosHandler({ protein, carbs, fat });\n    parseInt(carbs) + parseInt(protein) + parseInt(fat) !== 100 &&\n      toast.error(\"Must add up to 100%\");\n    macroGramsSetter();\n  }; //passes macros up to App component to allow for calculation for calories total/remaining etc\n\n  useEffect(() => {\n    setDailyCalories(props.dailyCalorieSelector);\n  }, [props]); //need to access slider calories amount in this component - without useffect = undefined as loading calorie slider before state was set\n\n  const macroGramsSetter = (props) => {\n    const { protein, fat, carbs } = macro;\n    const proteinGrams = (dailyCalories * (protein / 100)) / 4;\n    const carbGrams = (dailyCalories * (carbs / 100)) / 4;\n    const fatGrams = (dailyCalories * (fat / 100)) / 9;\n    setDailyMacroGrams({\n      protein: proteinGrams.toFixed(0),\n      carbs: carbGrams.toFixed(0),\n      fat: fatGrams.toFixed(0),\n    });\n  }; //used to calculate the grams for each macro from the total daily calories selected x the macro's %\n\n  const displayMacroGrams = () => {\n    return dailyMacroGrams ? (\n      <div>\n        <hr className=\"hr-macro-display\" />\n        <h6 className=\"total-macro-display\">\n          <strong> Daily Macro Allowance</strong>\n        </h6>\n        <p className=\"total-macro-display\">\n          {`Your daily allowance of protein is ${dailyMacroGrams.protein}g. Healthy sources of protein include fish, grains, and chicken.`}\n        </p>\n        <p className=\"total-macro-display\">\n          {\" \"}\n          {`Your daily allowance of carbohydrates is ${dailyMacroGrams.carbs}g. Healthy sources of carbohydrates include grains, lentils, fruit, and vegetables.`}\n        </p>\n\n        <p className=\"total-macro-display\">{`Your daily allowance of fat is ${dailyMacroGrams.fat}g. Healthy sources of fats include avocados, egg yolk, nuts, and seeds `}</p>\n      </div>\n    ) : (\n      \"\"\n    );\n  };\n\n  return (\n    <div className=\" MacroSelector-container \">\n      <h4 className=\"macro-selector-heading\">Macronutrient Calculator</h4>\n      <hr className=\"macro-selector-hr\" />\n      <div className=\"macro-selector-info-div\">\n        <p>\n          Macronutrients are the nutrients we need in larger quantities that\n          provide us with energy.\n        </p>\n        <p>There are seven major classes of nutrients:</p>\n        <ul>\n          <li> Carbohydrates </li>\n          <li> Dietary Fiber </li>\n          <li> Fats </li>\n          <li> Minerals </li>\n          <li style={{ paddingTop: \"1em\" }}> Proteins </li>\n          <li> Vitamins </li>\n          <li> Water </li>\n        </ul>\n      </div>\n      <hr className=\"hr-inputs\" />\n\n      <Form className=\"form-container\">\n        <p className=\"macro-selector-p-tag\">\n          Input the percentage of your diet that you want to be made up of\n          protein, carbohydrates, and fat.\n        </p>\n        <p className=\"macro-selector-p-tag\">\n          Hit Enter to see how many grams of each you should be consuming per\n          day!\n        </p>\n\n        <div className=\"form-group-container\">\n          <div className=\"form-group\">\n            <label className=\"input-label\" htmlFor=\"protein\">\n              <h6> Protein%: </h6>\n            </label>\n            <MacroSelectorInput\n              className=\"macro-input\"\n              id=\"protein\"\n              nutritionHandler={nutritionHandler}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"input-label\" htmlFor=\"carbs\">\n              <h6> Carbs%:</h6>\n            </label>\n            <MacroSelectorInput\n              className=\"macro-input\"\n              nutritionHandler={nutritionHandler}\n              id=\"carbs\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"input-label\" htmlFor=\"fat\">\n              <h6> Fat%:</h6>\n            </label>\n            <MacroSelectorInput\n              className=\"macro-input\"\n              nutritionHandler={nutritionHandler}\n              id=\"fat\"\n            />\n          </div>\n        </div>\n\n        <Button\n          className=\"calculate-button\"\n          id=\"button\"\n          type=\"submit\"\n          onClick={(e) => macrosHandler(e)}\n        >\n          Calculate\n        </Button>\n      </Form>\n\n      {displayMacroGrams(dailyMacroGrams)}\n    </div>\n  ); // Button above - Enter on fat input clicks calculate button when pass in event + stop refresh + type is submit\n};\n\nexport default MacroSelector;\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport { BsTrash } from \"react-icons/bs\";\n\n//Make the table row a different component https://stackoverflow.com/questions/40044861/get-key-index-on-click-es6-react\n\nconst FoodTable = (props) => {\n  const { foodItemDetails, sumOfFoodItems } = props;\n  const { fat, protein, carbs, calories } = sumOfFoodItems; //destructuring props\n\n  // const [windowSize, setWindowSize] = useState();\n  // console.log(window.screen.width, \"window\");\n\n  const windowClassName = () => {\n    if (window.screen.width < 760) {\n      return \"table-responsive\";\n    } else {\n      return \"table\";\n    }\n  }; //table-responsive looks bad on larger than 760px so changing to different className for > than 760\n\n  // useEffect(() => {\n  //   const handleResize = () => {\n  //     setWindowSize(window.screen.width);\n  //     window.addEventListener(\"resize\", console.log(\"resized\"));\n  //   };\n  // }, [window.screen.width]); //resize wasnt refreshing the screen so not working - windowClassName is workaround but not perfect\n\n  const removeRow = (e) => {\n    props.removeRow(e);\n  };\n\n  return (\n    <div>\n      <Table className={windowClassName()} striped>\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Food & Quantity</th>\n            <th scope=\"col\">Fat </th>\n            <th scope=\"col\">Carbs</th>\n            <th scope=\"col\">Protein</th>\n            <th scope=\"col\">Calories</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {foodItemDetails.length > 0 &&\n            foodItemDetails.map((foodItem, index) => {\n              return (\n                <tr key={foodItem.id}>\n                  <th scope=\"row\">{index + 1}</th>\n                  <td>{foodItem.name}</td>\n                  <td>{foodItem.fat} g</td>\n                  <td>{foodItem.carbs} g</td>\n                  <td>{foodItem.protein} g</td>\n                  <td>{foodItem.calories} kCal </td>\n                  <td>\n                    <BsTrash onClick={() => removeRow(foodItem)}></BsTrash>\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n        <tbody>\n          <tr style={{ backgroundColor: \"grey\" }}>\n            <th scope=\"row\"></th>\n            <td style={{ fontWeight: \"bold\" }}>Total</td>\n            <td>{fat} g</td>\n            <td>{carbs} g</td>\n            <td>{protein} g</td>\n            <td>{calories} kCal </td>\n            <td> </td>\n          </tr>\n        </tbody>\n        {props.remainingMacros && (\n          <tfoot>\n            <tr style={{ backgroundColor: \"grey\" }}>\n              <th scope=\"row\"></th>\n              <td style={{ fontWeight: \"bold\" }}>Remaining</td>\n              <td>{props.remainingMacros.fat.toFixed() - fat} g</td>\n              <td>{props.remainingMacros.carbs - carbs} g</td>\n              <td>{props.remainingMacros.protein - protein} g</td>\n              <td>{props.dailyCalorieSelector - calories} kCal </td>\n              <td> </td>\n            </tr>\n          </tfoot>\n        )}\n      </Table>\n    </div>\n  );\n};\nexport default FoodTable;\n","import React from \"react\";\nimport { Label, Input } from \"reactstrap\";\nimport calorieSelectorImage from \"../../src/images/selector-image.jpg\";\nimport \"./slider.css\";\nconst Sliders = ({ dailyCalorieSelector, setCalorieHandler }) => {\n  return (\n    <div className=\"slider-container text-center font-weight-light\">\n      <div className=\"calorie-setter-div\">\n        <h4 className=\"calorie-setter-heading\">Calorie Setter</h4>\n        <hr className=\"calorie-setter-hr\" />\n        <div\n          style={{\n            textAlign: \"center\",\n            marginLeft: \".5em\",\n            marginRight: \".5em\",\n          }}\n        >\n          <p>\n            The amount of calories a person burns each day varies depending on\n            your weight, gender, height, and body composition. To work out your\n            TDEE click\n            <a href=\"https://tdeecalculator.net/\"> here</a> .\n          </p>\n\n          <hr className=\"hr-inputs\" />\n          <p\n            style={{\n              textAlign: \"center\",\n              paddingTop: \"1em\",\n            }}\n          >\n            Use the slider to increase/decrease the amount of calories you wish\n            to consume per day\n          </p>\n        </div>\n        <div style={{ textAlign: \"center\" }}>\n          <Label for=\"volume\"></Label>\n\n          <input\n            className=\"slider\"\n            type=\"range\"\n            id=\"volume\"\n            name=\"volume\"\n            min=\"800\"\n            max=\"6000\"\n            step=\"10\"\n            value={dailyCalorieSelector}\n            onChange={setCalorieHandler}\n          />\n\n          <h5\n            style={{\n              display: \"inline\",\n              marginLeft: \"1em\",\n              alignContent: \"center !important\",\n            }}\n          >\n            {dailyCalorieSelector}\n          </h5>\n        </div>\n      </div>\n      <div className=\"image-div\">\n        <img className=\"calorie-slider-image\" src={calorieSelectorImage} />{\" \"}\n      </div>\n    </div>\n  );\n};\n\nexport default Sliders;\n","import React from \"react\";\nimport { Jumbotron } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAppleAlt,\n  faCalculator,\n  faHandPointer,\n  faPercentage,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Jumbo = (props) => {\n  return (\n    <div>\n      <Jumbotron>\n        <div style={{ marginTop: \"-2em\" }}>\n          <p\n            className=\"text-center font-weight-light\"\n            style={{ marginTop: \"1em\" }}\n          >\n            The NutritionApi App will search for your food and display the\n            macros and calories for that food, as well as deduct it from your\n            daily allowance.\n          </p>\n        </div>\n        <h5 className=\"text-center font-weight-light text-underline\">\n          <strong>Follow the 4 simple steps below! </strong>\n        </h5>\n\n        <hr className=\"text-center\" />\n        <main className=\" font-weight-light\" style={{ marginBottom: \"-3em\" }}>\n          <p style={{ marginTop: \"2em\" }}>\n            <span style={{ marginRight: \"1em\" }}>\n              <FontAwesomeIcon icon={faHandPointer} />\n            </span>\n            First, select the amount of calories you wish to consume per day\n            with the slider\n          </p>\n\n          <p>\n            <span style={{ marginRight: \"1em\" }}>\n              <FontAwesomeIcon icon={faPercentage} />\n            </span>\n            Next, enter the percentage of your diet that you want to be made up\n            of protein, carbohydrates, and fat\n          </p>\n          <p>\n            <span style={{ marginRight: \"1em\" }}>\n              <FontAwesomeIcon icon={faCalculator} />\n            </span>\n            When done, hit Calculate to work out the grams of each of the macros\n          </p>\n          <p style={{ paddingBottom: \"1.8em\" }}>\n            <span style={{ marginRight: \"1em\" }}>\n              <FontAwesomeIcon icon={faAppleAlt} />\n            </span>\n            Lastly, enter the food name and the grams/ml of the food you have\n            consumed and hit Enter!\n          </p>\n        </main>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Jumbo;\n","//Make the Form be in the App component and the div in the Searcher component but still allow to submit from the Searcher component\n//Error handling for no search result - Modal pops up saying sorry?\n//use media queries to build up for wider screens\n//div containing label and inputs isnt centered on wider screens-figure out how to centre the whole div\n//enter key on fat input no longer calculates - must press calculate with mouse - fix\n//margin between top of jumbotron and parent div gets too far as screen widens - make into class and change with media query\n//in order to make it a more broad appearing app and more of a journey/experience, i need to make each of the components have some intro or fluff to make them bigger and the app longer. for example, instead of having just set calories and a slider, take half a length of a web page and make it a big piece JUST for selecting the calories. Lots of info, widgets, interaction, big background picture - make it sleek like the bi\n//sleek and minimalist -\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Container } from \"reactstrap\";\n\nimport Searcher from \"./components/Searcher\";\nimport MacroSelector from \"./components/MacroSelector\";\nimport FoodTable from \"./components/FoodTable\";\nimport Slider from \"./components/Slider\";\nimport Jumbo from \"./components/Jumbotron\";\n\nconst App = (props) => {\n  const [dailyCalorieSelector, setDailyCalorieSelector] = useState(1800); //Slider Bar Value\n  const [foodItemDetails, setFoodItemDetails] = useState([]); //Stored response from API call with searchterm/calories/fat/protein/carbs/iud\n\n  const [sumOfFoodItems, setSumOfFoodItems] = useState({\n    protein: 0,\n    carbs: 0,\n    calories: 0,\n    fat: 0,\n  }); //Total Macros of all foods searched and not removed\n\n  const [remainingMacros, setRemainingMacros] = useState({\n    protein: 0,\n    fat: 0,\n    carbs: 0,\n  }); //DailyMacrosAllowed - sumOfFoodItems so far\n\n  const removeRow = (props) => {\n    let deletedRowNewArray = foodItemDetails.filter((row) => {\n      return row.id !== props.id;\n    });\n    setFoodItemDetails(deletedRowNewArray);\n    setSumOfFoodItems({\n      fat: sumOfFoodItems.fat - props.fat,\n      protein: sumOfFoodItems.protein - props.protein,\n      carbs: sumOfFoodItems.carbs - props.carbs,\n      calories: sumOfFoodItems.calories - props.calories,\n    });\n  }; //Remove row when user selectes delete option. props.id coming from FoodTable component\n\n  const macrosHandler = (props) => {\n    const { protein, carbs, fat } = props;\n    const proteinGrams = (dailyCalorieSelector * (protein / 100)) / 4;\n    const carbGrams = (dailyCalorieSelector * (carbs / 100)) / 4;\n    const fatGrams = (dailyCalorieSelector * (fat / 100)) / 9;\n    setRemainingMacros({\n      protein: proteinGrams,\n      carbs: carbGrams,\n      fat: fatGrams,\n    });\n  };\n  //receives the % macros set in MacroSelector component\n  //and divides the & against the daily calories selected to give grams required per macro\n\n  const setCalorieHandler = (props) => {\n    setDailyCalorieSelector(props.target.value);\n  }; //Setting total daily calories. Passed from Slider component\n\n  const onSearchSubmit = async (props) => {\n    let data = { title: props, ingr: [props] }; // ingredients list + title required\n    await axios\n      .post(\n        `https://api.edamam.com/api/nutrition-details?app_id=8b84adef&app_key=a931603d6a495dba409096cbf9eb7f71`,\n        data\n      )\n      .then((response) => {\n        setFoodItemDetails([\n          ...foodItemDetails,\n          {\n            name: props,\n            id: uuidv4(),\n            fat: response.data.totalNutrients.FAT.quantity.toFixed(),\n            protein: response.data.totalNutrients.PROCNT.quantity.toFixed(),\n            carbs: response.data.totalNutrients.CHOCDF.quantity.toFixed(),\n            calories: response.data.calories,\n          },\n        ]); //Storing searched item and its individual nutritional info in App state alongside previously searched items to dispaly in the FoodTable component rows\n        console.log(\"response\", response);\n        setSumOfFoodItems({\n          fat:\n            sumOfFoodItems.fat +\n            parseInt(response.data.totalNutrients.FAT.quantity.toFixed()),\n          protein:\n            sumOfFoodItems.protein +\n            parseInt(response.data.totalNutrients.PROCNT.quantity.toFixed()),\n          carbs:\n            sumOfFoodItems.carbs +\n            parseInt(response.data.totalNutrients.CHOCDF.quantity.toFixed()),\n          calories: sumOfFoodItems.calories + response.data.calories,\n        }); //Taking previous grams for each macro and adding it to the newly searched food item\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  return (\n    <Container className=\"bg-light\">\n      <h1 className=\"nav shadow p-4 mb-4 rounded\">Nutrition API</h1>\n      <Jumbo />\n      <div className=\"shadow bg-light mb-4 rounded slider-container\">\n        <Slider\n          dailyCalorieSelector={dailyCalorieSelector} //Passing down value to display calories selected\n          setCalorieHandler={setCalorieHandler} //Setting Calories required from Slider\n        />\n      </div>\n      <div\n        className=\"shadow rounded mb-4 mt-3 slider-container\"\n        style={{ alignItems: \"center\" }}\n      >\n        <MacroSelector\n          className=\"padding-bottom \"\n          macrosHandler={macrosHandler} //Receive the % for each macro to be used to calculate calories for each macro food\n          dailyCalorieSelector={dailyCalorieSelector}\n        />\n      </div>\n\n      <div className=\"slider-container shadow rounded mb-4 \">\n        <Searcher className=\"padding-bottom\" onSearchSubmit={onSearchSubmit} />\n        {foodItemDetails.length > 0 ? (\n          <FoodTable\n            foodItemDetails={foodItemDetails} //Passing down the cals/grams/name etc to display in a row\n            sumOfFoodItems={sumOfFoodItems} //Passing down the total cals etc to display\n            removeRow={removeRow}\n            dailyCalorieSelector={dailyCalorieSelector} //Passing down total calories selected for diet to calculate remaining calories\n            remainingMacros={remainingMacros} // Passing down to dispaly remaing grams for each macro\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n\n// const isInitialMount = useRef(true);\n// useEffect(() => {\n//   if (isInitialMount.current) {\n//     isInitialMount.current = false;\n//   } else {\n//     console.log(\"displayedInfoUseEffect\", displayedInfo);\n//   }\n// }, [displayedInfo]);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./components/myStyles.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}